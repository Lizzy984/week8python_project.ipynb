# -*- coding: utf-8 -*-
"""pythonweek8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t43UZfmP4-VY3YKWq2vOWJLl4EgvC6hw
"""



# Install streamlit
!pip install streamlit

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'df' is already loaded and processed from previous steps
# If not, you would load and process it here
# df = pd.read_csv('/content/country_wise_latest.csv')
# df['Active / 100 Cases'] = (df['Active'] / df['Confirmed']) * 100


st.title("COVID-19 Data Explorer by WHO Region")
st.write("Exploring confirmed cases, deaths, and recovered cases by WHO Region.")

# Display a sample of the data
st.subheader("Data Sample")
st.dataframe(df.head())

# Add interactive widget for selecting WHO Region (optional, as we are showing all regions)
# If you wanted to filter by region, you could add a multiselect here:
# selected_regions = st.multiselect("Select WHO Region(s)", df['WHO Region'].unique(), df['WHO Region'].unique())
# filtered_df = df[df['WHO Region'].isin(selected_regions)]

# Display visualizations (assuming the plots were generated in the previous step)

st.subheader("Total Confirmed Cases by WHO Region")
fig_confirmed = plt.figure(figsize=(12, 6))
sns.barplot(x='WHO Region', y='Confirmed', data=df, estimator=sum)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
st.pyplot(fig_confirmed)

st.subheader("Total Deaths by WHO Region")
fig_deaths = plt.figure(figsize=(12, 6))
sns.barplot(x='WHO Region', y='Deaths', data=df, estimator=sum, color='red')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
st.pyplot(fig_deaths)

st.subheader("Total Recovered Cases by WHO Region")
fig_recovered = plt.figure(figsize=(12, 6))
sns.barplot(x='WHO Region', y='Recovered', data=df, estimator=sum, color='green')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
st.pyplot(fig_recovered)

# You can add more visualizations or analysis here

st.subheader("Summary Statistics by WHO Region")
st.dataframe(df.groupby('WHO Region')[['Confirmed', 'Deaths', 'Recovered', 'Active']].sum())

"""## Documentation and Reflection

*   **Summary of Findings:**
    Based on the analysis of the `country_wise_latest.csv` dataset:
    *   The **Americas** region has the highest total confirmed cases, deaths, and active cases.
    *   **Europe** has the second-highest number of deaths.
    *   The **Eastern Mediterranean** and **South-East Asia** regions also show significant numbers of confirmed and recovered cases.
    *   The **Western Pacific** and **Africa** regions have the lowest numbers across confirmed cases, deaths, and recovered cases among the WHO regions in this dataset.

To run this Streamlit app, you will need to save the code above as a Python file (e.g., `app.py`) and then run it from your terminal using the command `streamlit run app.py`.

Note: Running Streamlit apps directly within Colab has some limitations. You might need to use `ngrok` or a similar service to expose your local Colab port to the internet to view the app in your browser.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Analyze confirmed cases, deaths, and recoveries by WHO Region
print("Summary statistics by WHO Region:")
display(df.groupby('WHO Region')[['Confirmed', 'Deaths', 'Recovered', 'Active']].sum())

# Visualize the distribution of Confirmed Cases by WHO Region
plt.figure(figsize=(12, 6))
sns.barplot(x='WHO Region', y='Confirmed', data=df, estimator=sum)
plt.title('Total Confirmed Cases by WHO Region')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Visualize the distribution of Deaths by WHO Region
plt.figure(figsize=(12, 6))
sns.barplot(x='WHO Region', y='Deaths', data=df, estimator=sum, color='red')
plt.title('Total Deaths by WHO Region')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Visualize the distribution of Recovered Cases by WHO Region
plt.figure(figsize=(12, 6))
sns.barplot(x='WHO Region', y='Recovered', data=df, estimator=sum, color='green')
plt.title('Total Recovered Cases by WHO Region')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Check for missing values again to confirm
print("Missing values before handling:")
print(df.isnull().sum())

# There are no missing values in this dataset, so we can skip handling missing data.

# The plan mentions converting date columns and extracting the year,
# but there are no date columns in this dataset based on the df.info() output.
# Therefore, we will skip these steps.

# Create new columns if needed - The plan mentions abstract word count,
# which is not applicable to this dataset. We can create new columns
# based on the existing data if needed for the analysis.

# For example, let's calculate the active cases per 100 cases
df['Active / 100 Cases'] = (df['Active'] / df['Confirmed']) * 100

# Display the updated DataFrame with the new column
print("\nDataFrame with 'Active / 100 Cases' column:")
display(df.head())

import pandas as pd

# Load the data into a pandas DataFrame
df = pd.read_csv('/content/country_wise_latest.csv')

# Display the first few rows
print("First 5 rows of the DataFrame:")
display(df.head())

# Display the data structure
print("\nDataFrame Info:")
display(df.info())

# Check the DataFrame dimensions
print("\nDataFrame Shape (rows, columns):")
print(df.shape)

# Check for missing values
print("\nMissing values per column:")
print(df.isnull().sum())

# Generate basic statistics for numerical columns
print("\nBasic statistics for numerical columns:")
display(df.describe())